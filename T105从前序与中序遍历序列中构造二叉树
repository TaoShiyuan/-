问题地址/Problem URL
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

问题介绍/Problem Description
Given preorder and inorder traversal of a tree, construct the binary tree.

Note: You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
前置知识
二叉树
思路/Thinking Path
目标是构造二叉树。

构造二叉树需要根的值、左子树和右子树。

此问题可被抽象为：从前序遍历和中序遍历中找到根节点、左子树和右子树。

先找根： 由前序遍历的性质，第0个节点为当前树的根节点。 再找左右子树： 在中序遍历中找到这个根节点，设其下标为i。由中序遍历的性质，0 ~ i-1 是左子树的中序遍历，i+1 ~ inorder.length-1是右子树的中序遍历。

然后递归求解，终止条件是左右子树为null。

We are going to construct a binary tree from its preorder and inorder traversal.

To build a binary tree, it requires us to creact a new TreeNode as the root with filling in the root value. And then, find its left child and right child recursively until the left or right child is null.

Now this problem is abstracted as how to find the root node, left child and right child from the preorder traversal and inorder traversal.

In preorder traversal, the first node (preorder[0]) is the root of current binary tree. In inorder traversal, find the location of this root which is i. The left sub-tree is 0 to i-1 and the right sub-tree is i+1 to inorder.length-1 in inorder traversal.

Then applying the previous operation to the left and right sub-trees.

关键解析/Key Points
如何在前序遍历的数组里找到左右子树的：

根据前序遍历的定义可知，每个当前数组的第一个元素就是当前子树的根节点的值
在中序遍历数组中找到这个值，设其下标为inRoot
当前中序遍历数组的起点inStart到inRoot之间就是左子树，其长度leftChldLen为inRoot-inStart
当前中序遍历数组的终点inEnd和inRoot之间就是右子树
前序遍历和中序遍历中左子树的长度是相等的，所以在前序遍历数组中，根节点下标preStart往后数leftChldLen即为左子树的最后一个节点，其下标为preStart+leftChldLen，右子树的第一个节点下标为preStart+leftChldLen+1。
PLEASE READ THE CODE BEFORE READING THIS PART

If you can't figure out how to get the index of the left and right child, please read this.

index of current node in preorder array is preStart(or whatever your call it), it's the root of a subtree.
according to the properties of preoder traversal, all right sub-tree nodes are behine all left sub-tree nodes. The length of left sub-tree can help us to divide left and right sub-trees.
the length of left sub-tree can be find in the inorder traversal. The location of current node is inRoot(or whatever your call it). The start index of current inorder array is inStart(or whatever your call it). So, the lenght of the left sub-tree is leftChldLen = inRoot - inStart.
explain

代码/Code
Java递归
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int prelen=preorder.length;
        int inlen=inorder.length;
        if(prelen!=inlen){
            throw new RuntimeException("incorrect input data");
        }
        Map<Integer,Integer> map=new HashMap<>(prelen);
        for(int i=0;i<inlen;i++){
            map.put(inorder[i],i);
        }
        return fun(preorder,0,prelen-1,map,0,inlen-1);
    }
    public TreeNode fun(int[] preorder,int preleft,int preright,Map<Integer,Integer> map,int inleft,int inright){
        if(preleft>preright||inleft>inright){
            return null;
        }
        int rootval=preorder[preleft];
        int index=map.get(rootval);
        TreeNode root=new TreeNode(rootval);
        root.left=fun(preorder,preleft+1,index+preleft-inleft,map,inleft,index-1);
        root.right=fun(preorder,index+preleft-inleft+1,preright,map,index+1,inright);
        return root;

    }
}
注意如何构造二叉树

JAVA迭代：
思路

迭代法是一种非常巧妙的实现方法。

对于前序遍历中的任意两个连续节点 uu 和 vv，根据前序遍历的流程，我们可以知道 uu 和 vv 只有两种可能的关系：

vv 是 uu 的左儿子。这是因为在遍历到 uu 之后，下一个遍历的节点就是 uu 的左儿子，即 vv；

uu 没有左儿子，并且 vv 是 uu 的某个祖先节点（或者 uu 本身）的右儿子。如果 uu 没有左儿子，那么下一个遍历的节点就是 uu 的右儿子。如果 uu 没有右儿子，我们就会向上回溯，直到遇到第一个有右儿子（且 uu 不在它的右儿子的子树中）的节点 u_au 
a
​	
 ，那么 vv 就是 u_au 
a
​	
  的右儿子。

第二种关系看上去有些复杂。我们举一个例子来说明其正确性，并在例子中给出我们的迭代算法。

例子

我们以树


        3
       / \
      9  20
     /  /  \
    8  15   7
   / \
  5  10
 /
4
为例，它的前序遍历和中序遍历分别为


preorder = [3, 9, 8, 5, 4, 10, 20, 15, 7]
inorder = [4, 5, 8, 10, 9, 3, 15, 20, 7]
我们用一个栈 stack 来维护「当前节点的所有还没有考虑过右儿子的祖先节点」，栈顶就是当前节点。也就是说，只有在栈中的节点才可能连接一个新的右儿子。同时，我们用一个指针 index 指向中序遍历的某个位置，初始值为 0。index 对应的节点是「当前节点不断往左走达到的最终节点」，这也是符合中序遍历的，它的作用在下面的过程中会有所体现。

首先我们将根节点 3 入栈，再初始化 index 所指向的节点为 4，随后对于前序遍历中的每个节点，我们依此判断它是栈顶节点的左儿子，还是栈中某个节点的右儿子。

我们遍历 9。9 一定是栈顶节点 3 的左儿子。我们使用反证法，假设 9 是 3 的右儿子，那么 3 没有左儿子，index 应该恰好指向 3，但实际上为 4，因此产生了矛盾。所以我们将 9 作为 3 的左儿子，并将 9 入栈。

stack = [3, 9]
index -> inorder[0] = 4
我们遍历 8，5 和 4。同理可得它们都是上一个节点（栈顶节点）的左儿子，所以它们会依次入栈。

stack = [3, 9, 8, 5, 4]
index -> inorder[0] = 4
我们遍历 10，这时情况就不一样了。我们发现 index 恰好指向当前的栈顶节点 4，也就是说 4 没有左儿子，那么 10 必须为栈中某个节点的右儿子。那么如何找到这个节点呢？栈中的节点的顺序和它们在前序遍历中出现的顺序是一致的，而且每一个节点的右儿子都还没有被遍历过，那么这些节点的顺序和它们在中序遍历中出现的顺序一定是相反的。

这是因为栈中的任意两个相邻的节点，前者都是后者的某个祖先。并且我们知道，栈中的任意一个节点的右儿子还没有被遍历过，说明后者一定是前者左儿子的子树中的节点，那么后者就先于前者出现在中序遍历中。

因此我们可以把 index 不断向右移动，并与栈顶节点进行比较。如果 index 对应的元素恰好等于栈顶节点，那么说明我们在中序遍历中找到了栈顶节点，所以将 index 增加 1 并弹出栈顶节点，直到 index 对应的元素不等于栈顶节点。按照这样的过程，我们弹出的最后一个节点 x 就是 10 的双亲节点，这是因为 10 出现在了 x 与 x 在栈中的下一个节点的中序遍历之间，因此 10 就是 x 的右儿子。

回到我们的例子，我们会依次从栈顶弹出 4，5 和 8，并且将 index 向右移动了三次。我们将 10 作为最后弹出的节点 8 的右儿子，并将 10 入栈。

stack = [3, 9, 10]
index -> inorder[3] = 10
我们遍历 20。同理，index 恰好指向当前栈顶节点 10，那么我们会依次从栈顶弹出 10，9 和 3，并且将 index 向右移动了三次。我们将 20 作为最后弹出的节点 3 的右儿子，并将 20 入栈。

stack = [20]
index -> inorder[6] = 15
我们遍历 15，将 15 作为栈顶节点 20 的左儿子，并将 15 入栈。

stack = [20, 15]
index -> inorder[6] = 15
我们遍历 7。index 恰好指向当前栈顶节点 15，那么我们会依次从栈顶弹出 15 和 20，并且将 index 向右移动了两次。我们将 7 作为最后弹出的节点 20 的右儿子，并将 7 入栈。

stack = [7]
index -> inorder[8] = 7
此时遍历结束，我们就构造出了正确的二叉树。

算法

我们归纳出上述例子中的算法流程：

我们用一个栈和一个指针辅助进行二叉树的构造。初始时栈中存放了根节点（前序遍历的第一个节点），指针指向中序遍历的第一个节点；

我们依次枚举前序遍历中除了第一个节点以外的每个节点。如果 index 恰好指向栈顶节点，那么我们不断地弹出栈顶节点并向右移动 index，并将当前节点作为最后一个弹出的节点的右儿子；如果 index 和栈顶节点不同，我们将当前节点作为栈顶节点的左儿子；

无论是哪一种情况，我们最后都将当前的节点入栈。

最后得到的二叉树即为答案。

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || preorder.length == 0) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[0]);
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        int inorderIndex = 0;
        for (int i = 1; i < preorder.length; i++) {
            int preorderVal = preorder[i];
            TreeNode node = stack.peek();
            if (node.val != inorder[inorderIndex]) {
                node.left = new TreeNode(preorderVal);
                stack.push(node.left);
            } else {
                while (!stack.isEmpty() && stack.peek().val == inorder[inorderIndex]) {
                //这里是stack.peek().val而不是node.val因为pop()是取栈顶的值并且将这个值从栈中取出，而比较时要舍去栈顶值比较下一个值                
                    node = stack.pop();
                    inorderIndex++;
                }
                node.right = new TreeNode(preorderVal);
                stack.push(node.right);
            }
        }
        return root;
    }
}
复杂度分析

时间复杂度：O(n)O(n)，其中 nn 是树中的节点个数。

空间复杂度：O(n)O(n)，除去返回的答案需要的 O(n)O(n) 空间之外，我们还需要使用 O(h)O(h)（其中 hh 是树的高度）的空间存储栈。这里 h < nh<n，所以（在最坏情况下）总空间复杂度为 O(n)O(n)。
