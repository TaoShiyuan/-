题目地址
https://leetcode-cn.com/problems/camelcase-matching/

题目描述
如果我们可以将小写字母插入模式串 pattern 得到待查询项 query，那么待查询项与给定模式串匹配。（我们可以在任何位置插入每个字符，也可以插入 0 个字符。）

给定待查询列表 queries，和模式串 pattern，返回由布尔值组成的答案列表 answer。只有在待查项 queries[i] 与模式串 pattern 匹配时， answer[i] 才为 true，否则为 false。

 

示例 1：

输入：queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FB"
输出：[true,false,true,true,false]
示例：
"FooBar" 可以这样生成："F" + "oo" + "B" + "ar"。
"FootBall" 可以这样生成："F" + "oot" + "B" + "all".
"FrameBuffer" 可以这样生成："F" + "rame" + "B" + "uffer".
示例 2：

输入：queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBa"
输出：[true,false,true,false,false]
解释：
"FooBar" 可以这样生成："Fo" + "o" + "Ba" + "r".
"FootBall" 可以这样生成："Fo" + "ot" + "Ba" + "ll".
示例 3：

输出：queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBaT"
输入：[false,true,false,false,false]
解释：
"FooBarTest" 可以这样生成："Fo" + "o" + "Ba" + "r" + "T" + "est".
 

提示：

1 <= queries.length <= 100
1 <= queries[i].length <= 100
1 <= pattern.length <= 100
所有字符串都仅由大写和小写英文字母组成。

思路
这道题是一道典型的双指针题目。不过这里的双指针并不是指向同一个数组或者字符串，而是指向多个，这道题是指向两个，分别是 query 和 pattern，这种题目非常常见，能够识别和掌握这种题目的解题模板非常重要。对 queries 的每一项我们的逻辑是一样的，这里就以其中一项为例进行讲解。

以 query 为 FooBar，pattern 为 FB 为例。

首先我们来简化一下问题，假如我们没有可以在任何位置插入每个字符，也可以插入 0 个字符。这个规则。我们的问题会比较简单，这个时候我们的算法是什么样的呢？一起来看下：

首先我们建立两个指针 i 和 j 分别指向 query 和 pattern 的首字母。
当 i 和 j 指向的字母相同的时候，我们同时向后移动两个指针一个单位。
当 i 和 j 指向的字母不同的时候，我们直接返回 False
假如我们要找到的不是子串，而是子序列怎么办？我们不妨假设判断 pattern 是否是 query 的子序列。 其实 LeetCode 实际上也有这样的题目，我们来看下：

首先我们建立两个指针 i 和 j 分别指向 query 和 pattern 的首字母。
当 i 和 j 指向的字母相同的时候，我们同时向后移动两个指针一个单位。
当 i 和 j 指向的字母不同的时候，我们移动 i 指针。
当 i 超出 query 范围的时候，我们只需要判断 pattern 是否达到了终点即可。当然我们也可以提前退出。
我们直接参考下 LeetCode 392. 判断子序列。

代码：

给定字符串 s 和 t ，判断 s 是否为 t 的子序列

Python Code:

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        i = 0
        j = 0
        while j < len(t):
            if i < len(s) and s[i] == t[j]:
                i += 1
                j += 1
            else:
                j += 1
            if i >= len (s):
                return True
        return i == len(s)
然后我们加上可以在任何位置插入每个字符，也可以插入 0 个字符。这个规则。来看下有什么不同：

首先我们建立两个指针 i 和 j 分别指向 query 和 pattern 的首字母。
当 i 和 j 指向的字母相同的时候，我们同时向后移动两个指针一个单位。
当 i 和 j 指向的字母不同的时候，我们继续判断 i 指向的元素是否是小写。
如果是小写我们只把 i 向后移动一个单位。
如果不是小写我们直接返回 False
关键点解析
双指针
字符串匹配
子序列
子串
代码
Python Code:

class Solution:
    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:
        res = []
        for query in queries:
            i = 0
            j = 0
            while i < len(query):
                if j < len(pattern) and query[i] == pattern[j]:
                    i += 1
                    j += 1
                elif query[i].islower():
                    i += 1
                else:
                    break
            if i == len(query) and j == len(pattern):
                res.append(True)
            else:
                res.append(False)
        return res
扩展
这是一个符合直觉的解法，但是却不是一个很优秀的解法，那么你有想到什么优秀的解法么？
JAVA法一，符合本文思想 双指针：
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.ArrayList;
class Solution {
    public List<Boolean> camelMatch(String[] queries, String pattern) {
        List<Boolean> list=new ArrayList<>();
        for(String query:queries){
            list.add(isMatch(query,pattern));
        }
        return list;
    }
    private Boolean isMatch(String query,String pattern){
        int index1=0,index2=0;
        int n1=query.length(),n2=pattern.length();
        while(index1<n1&&index2<n2){
            char ch1=query.charAt(index1),ch2=pattern.charAt(index2);
            if(ch1==ch2){
                index1++;
                index2++;
            }else{
                if(ch1>='A'&&ch1<='Z')return false;
                index1++;
            }
        }
        if(index2!=n2)return false;
        while(index1<n1){
            char ch1=query.charAt(index1);
            if(ch1>='A'&&ch1<='Z')return false;
            index1++;
        }
        return true;
    }
}
注意判断大写字母：ch1>='A'&&ch1<='Z'；数组中的循环for(String query:queries)

JAVA法二:正则暴力破解
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.ArrayList;
class Solution {
    public List<Boolean> camelMatch(String[] queries, String pattern) {
        List<Boolean> list=new ArrayList<Boolean>();
        StringBuilder str=new StringBuilder();
        for(int i=0;i<pattern.length();i++){
            str.append(String.valueOf(pattern.charAt(i)));
            str.append("[a-z]*");
        }
        String regex="[a-z]*"+str.toString()+"$";
        Pattern pattern1=Pattern.compile(regex);
        for(int i=0;i<queries.length;i++){
            Matcher matcher;
            matcher=pattern1.matcher(queries[i]);
            list.add(matcher.lookingAt());
        }
        return list;
    }
}
1.将pattern中的每个字符前后都加上[a-z]中的任意个作为正则表达式匹配串，再与queries进行匹配；
2.String 类型和 StringBuffer 的主要性能区别：String 是不可变的对象, 因此在每次对 String 类型进行改变的时候，
都会生成一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，
因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，性能就会降低。
使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。
所以多数情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。
在大部分情况下，StringBuilder > StringBuffer。这主要是由于前者不需要考虑线程安全;
3.StringBuilder继续改变字符串（添加新的字符串）.append()；
4.String.valueOf(pattern.charAt(i))  返回pattern的第i个字符，将其变成字符串的形式返回；
5.toString()将StringBuilder形式的str转换成String形式；“$”为正则匹结束的标志
6.compile() 方法也可用于改变和重新编译正则表达式
7.定义Matcher进行字符串和正则表达式的匹配
8.matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。
lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。



参考
392. 判断子序列
