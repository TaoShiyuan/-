题目地址
https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/

题目描述
Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)

Formally, return the largest V for which V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:

0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
0 <= j < j + M - 1 < i < i + L - 1 < A.length.
 

Example 1:

Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.
 

Note:

L >= 1
M >= 1
L + M <= A.length <= 1000
0 <= A[i] <= 1000
思路(动态规划)
题目中要求在前N(数组长度)个数中找出长度分别为L和M的非重叠子数组之和的最大值, 因此, 我们可以定义数组A中前i个数可构成的非重叠子数组L和M的最大值为SUMM[i], 并找到SUMM[i]和SUMM[i-1]的关系, 那么最终解就是SUMM[N]. 以下为图解:

1031.Maximum Sum of Two Non-Overlapping Subarrays

关键点解析
注意图中描述的都是A[i-1], 而不是A[i], 因为base case为空数组, 而不是A[0];
求解图中ASUM数组的时候, 注意定义的是ASUM[i] = sum(A[0:i]), 因此当i等于0时, A[0:0]为空数组, 即: ASUM[0]为0, 而ASUM[1]才等于A[0];
求解图中MAXL数组时, 注意i < L时, 没有意义, 因为长度不够, 所以从i = L时才开始求解;
求解图中MAXM数组时, 也一样, 要从i = M时才开始求解;
求解图中SUMM数组时, 因为我们需要一个L子数组和一个M子数组, 因此长度要大于等于L+M才有意义, 所以要从i = L + M时开始求解.
代码
语言支持: Python
Python Code:

class Solution:
    def maxSumTwoNoOverlap(self, a: List[int], l: int, m: int) -> int:
        """

        define asum[i] as the sum of subarray, a[0:i]
        define maxl[i] as the maximum sum of l-length subarray in a[0:i]
        define maxm[i] as the maximum sum of m-length subarray in a[0:i]
        define msum[i] as the maximum sum of non-overlap l-length subarray and m-length subarray

        case 1: a[i] is both not in l-length subarray and m-length subarray, then msum[i] = msum[i - 1]
        case 2: a[i] is in l-length subarray, then msum[i] = asum[i] - asum[i-l] + maxm[i-l]
        case 3: a[i] is in m-length subarray, then msum[i] = asum[i] - asum[i-m] + maxl[i-m]

        so, msum[i] = max(msum[i - 1], asum[i] - asum[i-l] + maxl[i-l], asum[i] - asum[i-m] + maxm[i-m])
        """

        alen, tlen = len(a), l + m
        asum = [0] * (alen + 1)
        maxl = [0] * (alen + 1)
        maxm = [0] * (alen + 1)
        msum = [0] * (alen + 1)

        for i in range(tlen):
            if i == 1:
                asum[i] = a[i - 1]
            elif i > 1:
                asum[i] = asum[i - 1] + a[i - 1]
            if i >= l:
                maxl[i] = max(maxl[i - 1], asum[i] - asum[i - l])
            if i >= m:
                maxm[i] = max(maxm[i - 1], asum[i] - asum[i - m])

        for i in range(tlen, alen + 1):
            asum[i] = asum[i - 1] + a[i - 1]
            suml = asum[i] - asum[i - l]
            summ = asum[i] - asum[i - m]
            maxl[i] = max(maxl[i - 1], suml)
            maxm[i] = max(maxm[i - 1], summ)
            msum[i] = max(msum[i - 1], suml + maxm[i - l], summ + maxl[i - m])

        return msum[-1]
扩展
代码中, 求解了4个动态规划数组来求解最终值, 有没有可能只用两个数组来求解该题, 可以的话, 需要保留的又是哪两个数组?
代码中, 求解的4动态规划数组的顺序能否改变, 哪些能改, 哪些不能改?
如果采用前缀和数组的话，可以只使用O(n)的空间来存储前缀和，O(1)的动态规划状态空间来完成。C++代码如下:

class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        auto tmp = vector<int>{A[0]};
        for (auto i = 1; i < A.size(); ++i) {
            tmp.push_back(A[i] + tmp[i - 1]);
        }
        auto res = tmp[L + M - 1], lMax = tmp[L - 1], mMax = tmp[M - 1];
        for (auto i = L + M; i < tmp.size(); ++i) {
            lMax = max(lMax, tmp[i - M] - tmp[i - M - L]);
            mMax = max(mMax, tmp[i - L] - tmp[i - L - M]);
            res = max(res, max(lMax + tmp[i] - tmp[i - M], mMax + tmp[i] - tmp[i - L]));
        }
        return res;
    }
};

在A中先遍历第一个数组，确定后根据条件在其前或者后遍历第二个数组，在此条件下比较每一个的最大和
Java：

import java.lang.Math;

class Solution {

    public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int sum1 = 0;
        for (int k = 0; k < 2; k++) {
            if (k == 1) {
                int temp = L;
                L = M;
                M = temp;
            }
            for (int j = 0; j <= A.length - M; j++) {
                int q1 = j;
                int sum = 0;
                for (int i = q1; i < q1 + M; i++) {

                    sum = sum + A[i];
                    //System.out.println(sum);
                }
                int q2 = slide(q1, L, M, A);

                if (q2 != -1) {
                    for (int i = q2; i < L + q2; i++) {
                        sum = sum + A[i];
                        //System.out.println(sum);
                    }
                }
                if (sum > sum1) {
                    sum1 = sum;
                }
            }
        }

        return sum1;
    }

    public static int slide(int temp, int L, int M, int[] A) {
        int sum1 = 0;
        int i1 = 0;
        if (temp >= L) {
            for (int i = 0; i <= temp - L; i++) {
                int sum = 0;
                for (int j = 0; j < L; j++) {
                    sum = A[i + j] + sum;
                }
                if (sum > sum1) {
                    sum1 = sum;
                    i1 = i;
                }

            }
        } else if (A.length - (temp + M) - 1 >= L) {
            for (int i = (temp + M) + 1; i <= A.length - L; i++) {
                int sum = 0;
                for (int j = 0; j < L; j++) {
                    sum = A[i + j] + sum;
                }
                if (sum > sum1) {
                    sum1 = sum;
                    i1 = i;
                }

            }
        } else {
            i1 = -1;
        }
        return i1;
    }
}
注意：先确定哪个长度的数组对最终答案会有影响，因此使用将其对调的思想 比较得最大值。
执行用时 :386 ms, 在所有 Java 提交中击败了5.52%的用户
内存消耗 :39.2 MB, 在所有 Java 提交中击败了50.00%的用户

JAVA法2：也是写个方法，判断两种不同先后顺序的长度赋值，双滑动窗，第一个滑动窗从左滑动到右，第二个滑动窗紧接着第一个滑动窗计算最大值，
比较后回退删除第一个值，继续向右滑动，直到找到第一个滑动窗口该位置下的最大值，然后第一个滑动窗口回退删除第一个值，继续向右滑动，再计算第二个
滑动窗口，直到第一个滑动窗口向右到满足条件。
public class Solution {
    public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int a = maxFunc(A, L, M);
        int b = maxFunc(A, M, L);
        return Math.max(a,b);
    }
    public int maxFunc(int[] A, int L, int M){
        if(L+M>A.length){
            return -1;
        }
        int i,j;
        int max = 0;
        int ret1 = 0;//滑动窗口部分和
        for(i = 0;i<L-1;i++){
            ret1+=A[i];
        }
        for(;i<A.length-M;i++){
            ret1 += A[i];
            int ret2 = 0;
            for(j = i+1;j<i+M;j++){
                ret2+=A[j];
            }
            for(;j<A.length;j++) {
                ret2 += A[j];
                max = Math.max(max, ret1+ret2);
                ret2 -=  A[j-M+1];
            }
            ret1 -= A[i-L+1];
        }
        return max;
    }
}
注意for(;i<A.length-M;i++),此时的i延续了上一个循环(i = 0;i<L-1;i++)中i的状态
i=L-2后又++也就是i=L-1跳出循环的状态。
二者取最大值max = Math.max(,)

执行用时 :5 ms, 在所有 Java 提交中击败了44.20%的用户
内存消耗 :39.3 MB, 在所有 Java 提交中击败了50.00%的用户
